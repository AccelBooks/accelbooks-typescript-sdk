/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as AccelBooks from "../../../index";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export declare namespace Export {
    interface Options {
        environment: core.Supplier<string>;
        fetcher?: core.FetchFunction;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}

export class Export {
    constructor(protected readonly _options: Export.Options) {}

    /**
     * Exports transactions for a company.
     *
     * @param {string} id
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AccelBooks.InternalServerError}
     *
     * @example
     *     await client.export.exportTransactions("id")
     */
    public async exportTransactions(id: string, requestOptions?: Export.RequestOptions): Promise<string> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                await core.Supplier.get(this._options.environment),
                `company/${encodeURIComponent(id)}/export`
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "accelbooks",
                "X-Fern-SDK-Version": "0.0.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.export_.exportTransactions.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 500:
                    throw new AccelBooks.InternalServerError(_response.error.body);
                default:
                    throw new errors.AccelBooksError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AccelBooksError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AccelBooksTimeoutError();
            case "unknown":
                throw new errors.AccelBooksError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Exports company data to S3.
     *
     * @param {string} id
     * @param {Export.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AccelBooks.InternalServerError}
     *
     * @example
     *     await client.export.exportCompanyData("id")
     */
    public async exportCompanyData(id: string, requestOptions?: Export.RequestOptions): Promise<string> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                await core.Supplier.get(this._options.environment),
                `company/${encodeURIComponent(id)}/export`
            ),
            method: "PUT",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "accelbooks",
                "X-Fern-SDK-Version": "0.0.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.export_.exportCompanyData.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 500:
                    throw new AccelBooks.InternalServerError(_response.error.body);
                default:
                    throw new errors.AccelBooksError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AccelBooksError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.AccelBooksTimeoutError();
            case "unknown":
                throw new errors.AccelBooksError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
